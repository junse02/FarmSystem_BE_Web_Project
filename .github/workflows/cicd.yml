name: 🚀 Build & Deploy (board-api)

on:
  push:
    branches: [ "main" ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    env:
      IMAGE_NAME: reha0124/farmsystem-be
      CONTAINER_NAME: board_api

    steps:
      # 1) 코드 체크아웃
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2) JDK 21 설정
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'

      # 3) Gradle 캐시
      - name: Cache Gradle
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      # 4) 빌드 (gradlew에 실행 권한 추가)
      - name: Build with Gradle (skip tests)
        run: |
          chmod +x gradlew  # 실행 권한 추가
          ./gradlew clean build -x test

      # 5) Docker Hub 로그인
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 6) Docker 이미지 빌드 & 푸시
      - name: Build & Push Docker image
        env:
          IMAGE_NAME: reha0124/farmsystem-be
        run: |
          docker build -f Dockerfile -t $IMAGE_NAME:${{ github.sha }} .
          docker tag $IMAGE_NAME:${{ github.sha }} $IMAGE_NAME:latest
          docker push $IMAGE_NAME:${{ github.sha }}
          docker push $IMAGE_NAME:latest

      # 7) EC2에 배포 (docker-compose 사용)
      - name: Deploy on EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          envs: JWT_SECRET # 환경 변수는 필요한 것만 전달
          script: |
            set -e

            # 1. 원격 서버에서 Docker Hub 로그인
            echo "${{ secrets.DOCKER_PASSWORD }}" | sudo docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

            # 2. 최신 Docker 이미지 풀
            echo "[2/4] 최신 Docker 이미지 풀"
            sudo docker pull ${{ env.IMAGE_NAME }}:latest

            # 3. Docker Compose로 컨테이너 재시작
            echo "[3/4] Docker-Compose로 컨테이너 재시작"
            cd ~/board
            # docker-compose.yml 파일이 있는 디렉토리로 이동
            
            # 컨테이너와 볼륨을 안전하게 중지 및 삭제
            sudo docker-compose down --remove-orphans

            # 환경 변수와 함께 docker-compose up 실행
            # docker-compose.yml 파일의 environment 항목에 이미 변수 설정이 있기 때문에
            # 여기서는 비밀 키를 명시적으로 넘겨주면 됩니다.
            sudo docker-compose up -d

            # 4. 애플리케이션 로그 확인
            echo "[4/4] 애플리케이션 로그 확인"
            sleep 30
            sudo docker-compose logs --tail 50 board-api || true
