name: "🚀 Build & Deploy (board-api)"

on:
  push:
    branches: ["main"]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    env:
      IMAGE_NAME: reha0124/farmsystem-be
      CONTAINER_NAME: board-api    # 하이픈으로 통일
      SERVICE_DIR: /home/ubuntu/board  # compose 있는 디렉토리

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "21"

      - name: Cache Gradle
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build with Gradle (skip tests)
        run: ./gradlew clean build -x test

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build & Push Docker image
        run: |
          docker build -f Dockerfile -t $IMAGE_NAME:${{ github.sha }} .
          docker tag $IMAGE_NAME:${{ github.sha }} $IMAGE_NAME:latest
          docker push $IMAGE_NAME:${{ github.sha }}
          docker push $IMAGE_NAME:latest

      # (선택) 키 로드 디버그 — 1회만 써서 원인 확정
      - name: Debug SSH key load
        run: |
          set -e
          eval "$(ssh-agent -s)"
          ssh-add - <<< "${{ secrets.EC2_PRIVATE_KEY }}"
          ssh -o StrictHostKeyChecking=no -vvv ubuntu@${{ secrets.EC2_HOST }} "echo connected && uname -a"

      - name: Deploy on EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          # passphrase: ${{ secrets.EC2_PASSPHRASE }} # 필요한 경우만
          script: |
            set -e
            echo "[1/4] Docker login"
            echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

            echo "[2/4] Compose redeploy"
            cd $SERVICE_DIR
            docker compose down -v --remove-orphans || true
            docker rm -f $CONTAINER_NAME || true

            # 최신 이미지 강제 반영
            docker rmi $IMAGE_NAME:latest || true
            docker compose pull
            docker compose up -d

            echo "[3/4] 상태/로그"
            sleep 20
            docker ps --format 'table {{.Names}}\t{{.Image}}\t{{.Status}}\t{{.Ports}}'
            curl -s http://localhost:8080/actuator/health || true
            docker compose logs --tail 120 $CONTAINER_NAME || true

            echo "[4/4] 이미지 정리"
            docker image prune -f
