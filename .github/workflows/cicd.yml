name: "🚀 Build & Deploy (board-api)"

on:
  push:
    branches: ["main"]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    env:
      IMAGE_NAME: reha0124/farmsystem-be
      CONTAINER_NAME: board_api

    steps:
      # 1) 코드 체크아웃
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2) JDK 21 설정
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "21"

      # 3) Gradle 캐시
      - name: Cache Gradle
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      # ✅ gradlew 실행 권한 부여 (필수)
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      # 4) 빌드 (필요 시 -x test 제거)
      - name: Build with Gradle (skip tests)
        run: ./gradlew clean build -x test

      # 5) Docker Hub 로그인.
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 6) Docker 이미지 빌드 & 푸시
      - name: Build & Push Docker image
        env:
          IMAGE_NAME: reha0124/farmsystem-be
        run: |
          docker build -f Dockerfile -t $IMAGE_NAME:${{ github.sha }} .
          docker tag $IMAGE_NAME:${{ github.sha }} $IMAGE_NAME:latest
          docker push $IMAGE_NAME:${{ github.sha }}
          docker push $IMAGE_NAME:latest

      # 7) EC2에 배포 (docker-compose 사용)
      - name: Deploy on EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            set -e

            echo "[1/4] Docker 로그인"
            echo "${{ secrets.DOCKER_PASSWORD }}" | sudo docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

            echo "[2/4] docker-compose로 재배포"
            cd ~/board
            sudo docker-compose down -v --remove-orphans || true
            sudo docker rm -f board_api || true

            # 최신 이미지 사용 강제 (있으면 삭제 후 재pull)
            sudo docker rmi ${{ secrets.DOCKER_USERNAME }}/farmsystem-be:latest || true
            sudo docker rmi postgres:15-alpine || true
            sudo docker rmi redis:7-alpine || true

            sudo docker-compose up -d

            echo "[3/4] 상태/로그 확인"
            sleep 20
            sudo docker ps --format 'table {{.Names}}\t{{.Image}}\t{{.Status}}\t{{.Ports}}'
            curl -s http://localhost:8080/actuator/health || true
            sudo docker-compose logs --tail 100 board-api || true

            echo "[4/4] 오래된 이미지 정리"
            sudo docker image prune -f
